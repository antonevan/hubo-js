// Generated by CoffeeScript 1.6.3
var animate, isNumber, loadTrajectoryFile, loadTrajectoryString, togglePlay;

window.playback = {};

playback.possible_states = ['NOT_LOADED', 'LOADING', 'LOADED', 'PLAYING', 'STOPPED', 'DONE_PLAYING'];

playback.state = 'NOT_LOADED';

playback.filename = null;

window.param = 150 / 200;

window.param2 = 30;

loadTrajectoryString = function(allText, callback) {
  var allTextLines, data, delimiter, headers, line, n, this_many, _i, _len;
  if ((callback == null) && (typeof parent_callback !== "undefined" && parent_callback !== null)) {
    callback = parent_callback;
  }
  allText = allText.replace('\r\n', '\n');
  allText = allText.replace('\n\r', '\n');
  allTextLines = allText.split('\n');
  delimiter = /[ \t,]+/;
  headers = allTextLines.shift().split(delimiter);
  if (isNumber(headers[0])) {
    this_many = headers.length - 1;
    allTextLines.unshift(headers.join(' '));
    headers = "RHY RHR RHP RKN RAP RAR LHY LHR LHP LKN LAP LAR RSP RSR RSY REB RWY RWR RWP LSP LSR LSY LEB LWY LWR LWP NKY NK1 NK2 WST RF1 RF2 RF3 RF4 RF5 LF1 LF2 LF3 LF4 LF5";
    headers = headers.split(delimiter);
    headers = headers.slice(0, +this_many + 1 || 9e9);
  }
  data = [];
  for (_i = 0, _len = allTextLines.length; _i < _len; _i++) {
    line = allTextLines[_i];
    line = line.trim();
    if (line !== "") {
      data.push((function() {
        var _j, _len1, _ref, _results;
        _ref = line.split(delimiter);
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          n = _ref[_j];
          _results.push(parseFloat(n));
        }
        return _results;
      })());
    }
  }
  return callback(headers, data);
};

loadTrajectoryFile = function(filename, callback) {
  console.log('loadTrajectory');
  return $.ajax({
    type: "GET",
    url: filename,
    dataType: "text",
    success: function(data) {
      return loadTrajectoryString(data, callback);
    }
  });
};

togglePlay = function() {
  if (playback.footMatrix == null) {
    playback.footMatrix = new THREE.Matrix4;
    playback.footMatrix.copy(hubo.links.Body_RAR.matrixWorld);
  }
  if (playback.state === 'DONE_PLAYING') {
    playback.frame = 0;
  }
  switch (playback.state) {
    case 'LOADED':
    case 'STOPPED':
    case 'DONE_PLAYING':
      playback.state = 'PLAYING';
      playback.startedTime = window.performance.now() - playback.frame / playback.framerate * 1000;
      window.setTimeout(animate, 1);
      window.numframes = 0;
      break;
    case 'PLAYING':
      playback.state = 'STOPPED';
  }
};

animate = function(timestamp) {
  var a, b, delta, delta_post, i, j, process_time, prop, tmp, _i, _j, _ref, _ref1, _ref2, _ref3;
  if (timestamp == null) {
    timestamp = window.performance.now();
  }
  stats.begin();
  if (playback.state !== 'PLAYING') {
    return;
  }
  playback.lastframe = playback.frame;
  delta = timestamp - playback.startedTime;
  playback.frame = Math.round(delta * playback.framerate / 1000);
  if (playback.frame >= playback.data.length) {
    playback.state = 'DONE_PLAYING';
    return;
  }
  for (prop in playback.working_headers) {
    i = playback.working_headers[prop];
    if (prop.slice(0, 2) === "LF" || prop.slice(0, 2) === "RF") {
      tmp = 0;
      for (j = _i = _ref = playback.lastframe + 1, _ref1 = playback.frame; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; j = _ref <= _ref1 ? ++_i : --_i) {
        tmp += playback.data[j][i];
      }
      tmp /= playback.framerate;
      hubo.motors[prop].value -= tmp / window.param;
    } else if ((prop.slice(0, 3) === "NK1") || (prop.slice(0, 3) === "NK2")) {
      tmp = 0;
      for (j = _j = _ref2 = playback.lastframe + 1, _ref3 = playback.frame; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
        tmp += playback.data[j][i];
      }
      tmp *= window.param2;
      hubo.motors[prop].value = 10;
    } else {
      hubo.motors[prop].value = playback.data[playback.frame][i];
    }
  }
  a = new THREE.Matrix4;
  a.getInverse(hubo.links.Body_RAR.matrixWorld);
  b = new THREE.Matrix4;
  b.multiplyMatrices(a, playback.footMatrix);
  hubo.links.Body_Torso.applyMatrix(b);
  delta_post = window.performance.now() - playback.startedTime;
  process_time = delta_post - delta;
  window.numframes++;
  c.render();
  stats.end();
  window.setTimeout(animate, 1);
};

isNumber = function(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
